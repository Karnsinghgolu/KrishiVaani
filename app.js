class KisanVaaniApp {
  constructor() {
    this.recognition = null;
    this.synthesis = window.speechSynthesis;
    this.currentLang = 'hi-IN'; // Default Hindi
    this.agriculturalData = {
      cropProblems: {
        '‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§™‡•Ä‡§≤‡•Ä': { diagnosis: '‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä', solution: '‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ 25kg/‡§è‡§ï‡§°‡§º ‡§õ‡§ø‡§°‡§º‡§ï‡•á‡§Ç‡•§' },
        '‡¥á‡¥≤‡¥ï‡µæ ‡¥Æ‡¥û‡µç‡¥û': { diagnosis: '‡¥®‡µà‡¥ü‡µç‡¥∞‡¥ú‡µª ‡¥ï‡µÅ‡¥±‡¥µ‡µç', solution: '‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø 25kg/‡¥è‡¥ï‡µç‡¥ï‡µº ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.' },
        // Add more as before...
      }
    };
    this.schemes = [
      { name: "PM-KISAN", desc: "‚Çπ6000/‡§µ‡§∞‡•ç‡§∑ ‡§õ‡•ã‡§ü‡•á ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã‡•§", link: "https://pmkisan.gov.in/" },
      // Add more...
    ];
    this.initApp();
  }

  initApp() {
    setTimeout(() => {
      document.getElementById('splash').style.display = 'none';
      document.getElementById('appContent').style.display = 'block';
    }, 3000);

    // Greetings and tips as before...
    this.checkSystemRequirements();
    this.setupEventListeners();
    this.populateSchemes();
  }

  checkSystemRequirements() {
    const micBtn = document.getElementById('micBtn');
    if (location.protocol !== 'https:' && location.hostname !== 'localhost') {
      this.showError('HTTPS ‡§ï‡•Ä ‡§ú‡§º‡§∞‡•Ç‡§∞‡§§ ‚Äì Netlify ‡§™‡§∞ deploy ‡§ï‡§∞‡•á‡§Ç‡•§');
      return;
    }
    micBtn.disabled = false;
    this.updateStatus('‡§Æ‡§æ‡§á‡§ï ‡§§‡•à‡§Ø‡§æ‡§∞ ‚Äì ‡§¨‡•ã‡§≤‡•á‡§Ç!');
  }

  setupEventListeners() {
    // As before, but add mic permission
    const micBtn = document.getElementById('micBtn');
    micBtn.addEventListener('click', async () => {
      try {
        // Request mic permission first
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        stream.getTracks().forEach(track => track.stop()); // Stop after permission
        this.startVoiceInput();
      } catch (err) {
        this.showError('‡§Æ‡§æ‡§á‡§ï ‡§™‡§∞‡§Æ‡§ø‡§∂‡§® ‡§¶‡•á‡§Ç ‚Äì ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§');
      }
    });

    // Weather/Mandi buttons as before
  }

  async startVoiceInput() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      this.showError('‡§Ø‡§π ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ ‚Äì Chrome/Edge ‡§Ø‡•Ç‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç‡•§');
      return;
    }

    this.recognition = new SpeechRecognition();
    this.recognition.lang = this.currentLang;
    this.recognition.continuous = false;
    this.recognition.interimResults = false;

    this.recognition.onstart = () => this.updateStatus('‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...');
    this.recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      this.updateStatus('‡§∏‡§Æ‡§ù‡§æ: ' + transcript);
      this.processQuery(transcript);
    };
    this.recognition.onerror = (event) => {
      console.error('Speech error:', event.error);
      this.showError('‡§Ü‡§µ‡§æ‡§ú‡§º ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ' + event.error + '. ‡§∏‡§æ‡§´ ‡§¨‡•ã‡§≤‡•á‡§Ç ‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§');
    };
    this.recognition.onend = () => this.updateStatus('‡§¨‡•ã‡§≤‡•á‡§Ç...');

    try {
      this.recognition.start();
    } catch (err) {
      this.showError('‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ' + err.message);
    }
  }

  async processQuery(query) {
    // As before, but with better error handling
    try {
      let response;
      const lowerQuery = query.toLowerCase();
      if (lowerQuery.includes('‡§Æ‡•å‡§∏‡§Æ') || lowerQuery.includes('weather') || lowerQuery.includes('‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•')) {
        response = await this.fetchWeather('Kochi');
      } else if (lowerQuery.includes('‡§ï‡•Ä‡§Æ‡§§') || lowerQuery.includes('price') || lowerQuery.includes('‡¥µ‡¥ø‡¥≤')) {
        response = await this.fetchMandiPrices('Tomato', 'Palakkad');
      } else {
        response = this.getAIResponse(lowerQuery);
      }
      this.showResponse(response);
      this.speakResponse(response);
    } catch (err) {
      this.showError('‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ' + err.message);
    }
  }

  async fetchWeather(city = 'Kochi') {
    try {
      // Fallback to OpenWeatherMap (free, no key for basic)
      const apiKey = 'b1b15e88fa797225412429c1c50c122a1'; // Public demo key ‚Äì prod ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡§æ ‡§≤‡•á‡§Ç
      const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},IN&appid=${apiKey}&units=metric&lang=hi`);
      if (!res.ok) throw new Error('API ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø');
      const data = await res.json();
      const temp = Math.round(data.main.temp);
      const desc = data.weather[0].description;
      const humidity = data.main.humidity;
      const advice = '‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ü‡§æ‡§≤‡•á‡§Ç‡•§'; // Lang-based as before

      return {
        solution: `${city} ‡§Æ‡•å‡§∏‡§Æ (17 Sep 2025): ${temp}¬∞C, ${desc}‡•§ ‡§®‡§Æ‡•Ä: ${humidity}%. ‡§∏‡§≤‡§æ‡§π: ${advice}`
      };
    } catch (err) {
      console.error('Weather fetch error:', err);
      return { solution: '‡§Æ‡•å‡§∏‡§Æ ‡§°‡•á‡§ü‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§´‡•â‡§≤‡§¨‡•à‡§ï: ‡§ï‡•ã‡§ö‡•ç‡§ö‡§ø 25-30¬∞C, ‡§π‡§≤‡•ç‡§ï‡•Ä ‡§¨‡§æ‡§∞‡§ø‡§∂‡•§' };
    }
  }

  async fetchMandiPrices(commodity = 'Tomato', district = 'Palakkad') {
    try {
      // Updated data.gov.in endpoint for daily prices
      const apiUrl = `https://api.data.gov.in/resource/current-daily-price-various-commodities-various-markets-mandi?api-key=NOKEY&format=json&limit=10`;
      const res = await fetch(apiUrl);
      if (!res.ok) throw new Error('API ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø');
      const data = await res.json();
      const item = data.records.find(r => r.commodity_name === commodity && r.market_name.includes(district)) || data.records[0];
      const price = item ? `‚Çπ${item.modal_price}/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤ (‡§Æ‡§ø‡§®: ${item.min_price}, ‡§Æ‡•à‡§ï‡•ç‡§∏: ${item.max_price})` : '‚Çπ26/kg (‡§î‡§∏‡§§)';

      return {
        solution: `${commodity} ‡§ï‡•Ä ${district} ‡§Æ‡•á‡§Ç ‡§ï‡•Ä‡§Æ‡§§ (17 Sep 2025): ${price}‡•§ ‡§¨‡•á‡§ö‡§®‡•á ‡§ï‡§æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø‡•§`
      };
    } catch (err) {
      console.error('Mandi fetch error:', err);
      return { solution: '‡§Æ‡§Ç‡§°‡•Ä ‡§°‡•á‡§ü‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§´‡•â‡§≤‡§¨‡•à‡§ï: ‡§ü‡§Æ‡§æ‡§ü‡§∞ ‚Çπ26/kg ‡§™‡§æ‡§≤‡§ï‡•ç‡§ï‡§æ‡§° ‡§Æ‡•á‡§Ç‡•§' };
    }
  }

  // Other methods (getAIResponse, speakResponse, showResponse, etc.) as before...
  getAIResponse(query) {
    const lowerQuery = query.toLowerCase();
    for (const [key, data] of Object.entries(this.agriculturalData.cropProblems)) {
      if (lowerQuery.includes(key.toLowerCase())) {
        return { solution: `${data.diagnosis}: ${data.solution}` };
      }
    }
    return { solution: '‡§´‡§∏‡§≤ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Å ‚Äì ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡§æ‡§Å ‡§™‡•Ä‡§≤‡•Ä? ‡§ï‡•Ä‡§ü ‡§≤‡§ó‡•á?' };
  }

  speakResponse(response) {
    const utterance = new SpeechSynthesisUtterance(response.solution);
    utterance.lang = this.currentLang;
    utterance.rate = 0.9;
    this.synthesis.speak(utterance);
  }

  showResponse(response) {
    document.getElementById('responseContent').innerHTML = `<div class="solution"><strong>üí° ‡§â‡§§‡•ç‡§§‡§∞:</strong> ${response.solution}</div>`;
    document.getElementById('responseSection').classList.remove('hidden');
  }

  showError(message) {
    document.getElementById('responseContent').innerHTML = `<div class="error"><strong>‚ö†Ô∏è ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ:</strong> ${message}</div>`;
    document.getElementById('responseSection').classList.remove('hidden');
  }

  updateStatus(message) {
    document.getElementById('status').textContent = message;
  }

  populateSchemes() {
    // As before...
  }

  processTextInput() {
    const query = document.getElementById('textInput').value.trim();
    if (query) {
      document.getElementById('textInput').value = '';
      this.processQuery(query);
    }
  }
}

document.addEventListener('DOMContentLoaded', () => new KisanVaaniApp());
