// KisanVaani - Fully Functional for All India Farmers (2025 Update)
class KisanVaani {
    constructor() {
        this.recognition = null;
        this.synthesis = window.speechSynthesis;
        this.isListening = false;
        this.currentTranscript = '';
        this.finalTranscript = '';
        this.permissionGranted = false;
        this.currentLang = 'hi-IN';

        // Expanded Knowledge Base (India-wide + Kerala focus)
        this.agriculturalData = {
            cropProblems: {
                // Hindi/North
                "‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§™‡•Ä‡§≤‡•Ä": { diagnosis: "‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä", solution: "‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ 25kg/‡§è‡§ï‡§°‡§º ‡§õ‡§ø‡§°‡§º‡§ï‡•á‡§Ç‡•§ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à‡•§", urgency: "‡§§‡•Å‡§∞‡§Ç‡§§ ‚Äì 3-4 ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞" },
                "‡§ï‡•Ä‡§°‡§º‡•á ‡§≤‡§ó‡•á": { diagnosis: "‡§ï‡•Ä‡§ü ‡§™‡•ç‡§∞‡§ï‡•ã‡§™ (‡§è‡§´‡§ø‡§°/‡§¨‡•ã‡§≤‡§µ‡§∞‡•ç‡§Æ)", solution: "‡§®‡•Ä‡§Æ ‡§§‡•á‡§≤ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§á‡§Æ‡§ø‡§°‡§æ‡§ï‡•ç‡§≤‡•ã‡§™‡•ç‡§∞‡§ø‡§° ‡§Ö‡§ó‡§∞ ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä‡•§", urgency: "2-3 ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£" },
                // Malayalam/Kerala
                "‡¥á‡¥≤‡¥ï‡µæ ‡¥Æ‡¥û‡µç‡¥û": { diagnosis: "‡¥®‡µà‡¥ü‡µç‡¥∞‡¥ú‡µª ‡¥ï‡µÅ‡¥±‡¥µ‡µç", solution: "‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø 25kg/‡¥è‡¥ï‡µç‡¥ï‡µº ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥ú‡¥≤‡¥∏‡µá‡¥ö‡¥®‡¥Ç ‡¥®‡¥ü‡¥§‡µç‡¥§‡µÅ‡¥ï.", urgency: "‡¥â‡¥ü‡µª ‚Äì 3-4 ‡¥¶‡¥ø‡¥µ‡¥∏‡¥Ç" },
                "‡¥®‡¥æ‡¥≥‡¥ø‡¥ï‡µá‡¥∞‡¥Ç ‡¥¨‡¥°‡µç ‡¥±‡µã‡¥ü‡µç‡¥ü‡µç": { diagnosis: "‡¥®‡¥æ‡¥≥‡¥ø‡¥ï‡µá‡¥∞‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥¨‡¥°‡µç ‡¥±‡µã‡¥ü‡µç‡¥ü‡µç ‡¥∞‡µã‡¥ó‡¥Ç", solution: "‡¥¨‡µã‡µº‡¥°‡µã ‡¥Æ‡¥ø‡¥∂‡µç‡¥∞‡¥ø‡¥§‡¥Ç (1%) ‡¥∏‡µç‡¥™‡µç‡¥∞‡µá. ‡¥∞‡µã‡¥ó‡¥≠‡¥æ‡¥ó‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µÄ‡¥ï‡µç‡¥ï‡¥Ç.", urgency: "‡¥â‡¥ü‡µª ‡¥®‡¥ü‡¥™‡¥ü‡¥ø" },
                // Add more for other langs/crops
            }
        };

        // 2025 Government Schemes (with official links from sources)
        this.schemes = [
            { name: "PM-KISAN ‡§∏‡§Æ‡§æ‡§® ‡§®‡§ø‡§ß‡§ø", desc: "‚Çπ6000/‡§µ‡§∞‡•ç‡§∑ ‡§õ‡•ã‡§ü‡•á ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§§‡•Ä‡§® ‡§ï‡§ø‡§∏‡•ç‡§§‡•ã‡§Ç ‡§Æ‡•á‡§Ç‡•§", link: "https://pmkisan.gov.in/" },
            { name: "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ (PMFBY)", desc: "‡§´‡§∏‡§≤ ‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§™‡§∞ ‡§¨‡•Ä‡§Æ‡§æ ‡§ï‡§µ‡§∞‡•§", link: "https://pmfby.gov.in/" },
            { name: "‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§° (KCC)", desc: "‡§ï‡§Æ ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§™‡§∞ ‡§≤‡•ã‡§®, ‡§≤‡§ø‡§Æ‡§ø‡§ü ‚Çπ5 ‡§≤‡§æ‡§ñ ‡§§‡§ï‡•§", link: "https://www.nabard.org/content.aspx?id=23" },
            { name: "‡§∏‡•â‡§á‡§≤ ‡§π‡•á‡§≤‡•ç‡§• ‡§ï‡§æ‡§∞‡•ç‡§°", desc: "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§Æ‡•Å‡§´‡•ç‡§§, ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§∏‡§≤‡§æ‡§π‡•§", link: "https://soilhealth.dac.gov.in/" },
            { name: "‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§¨‡§æ‡§ú‡§æ‡§∞ (e-NAM)", desc: "‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§Æ‡§Ç‡§°‡•Ä ‡§ü‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó‡•§", link: "https://enam.gov.in/" },
            { name: "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ß‡§®-‡§ß‡§æ‡§®‡•ç‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§Ø‡•ã‡§ú‡§®‡§æ", desc: "1.7 ‡§ï‡§∞‡•ã‡§°‡§º ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§ï‡§§‡§æ ‡§¨‡§¢‡§º‡§æ‡§®‡§æ‡•§", link: "https://agriwelfare.gov.in/en/Major" },
            { name: "‡§Ü‡§§‡•ç‡§Æ‡§®‡§ø‡§∞‡•ç‡§≠‡§∞ ‡§¶‡§æ‡§≤‡•á‡§Ç ‡§Æ‡§ø‡§∂‡§®", desc: "‡§â‡§°‡§º‡§¶, ‡§§‡•Ç‡§∞, ‡§Æ‡§∏‡•Ç‡§∞ ‡§™‡§∞ ‡§´‡•ã‡§ï‡§∏, NAFED ‡§ñ‡§∞‡•Ä‡§¶‡•§", link: "https://agriwelfare.gov.in/" },
            // More from 2025 Budget
            { name: "‡§è‡§ó‡•ç‡§∞‡•Ä‡§ï‡§≤‡•ç‡§ö‡§∞ ‡§á‡§Ç‡§´‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞ ‡§´‡§Ç‡§°", desc: "‚Çπ1 ‡§≤‡§æ‡§ñ ‡§ï‡§∞‡•ã‡§°‡§º ‡§µ‡•á‡§Ø‡§∞‡§π‡§æ‡§â‡§∏‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è‡•§", link: "https://www.agriwelfare.gov.in/en/Major" }
        ];

        this.init();
    }

    init() {
        console.log('üåæ KisanVaani Initializing...');
        this.checkSystemRequirements();
        this.setupEventListeners();
        this.populateSchemes();
        this.updateStatus("‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§§‡•à‡§Ø‡§æ‡§∞! ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç ‡§î‡§∞ ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§");
    }

    checkSystemRequirements() {
        // Previous code (HTTPS, Browser, Mic check)
        const isHttps = location.protocol === 'https:' || location.hostname === 'localhost';
        const hasSpeech = 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;
        const hasMedia = navigator.mediaDevices && navigator.mediaDevices.getUserMedia;

        document.getElementById('httpsStatus').textContent = isHttps ? 'üü¢' : 'üî¥';
        document.getElementById('httpsText').textContent = isHttps ? 'Secure' : 'Need HTTPS';
        document.getElementById('httpsText').className = isHttps ? 'status-ready' : 'status-error';

        document.getElementById('browserStatus').textContent = hasSpeech ? 'üü¢' : 'üî¥';
        document.getElementById('browserText').textContent = hasSpeech ? 'Compatible' : 'Use Chrome/Edge';
        document.getElementById('browserText').className = hasSpeech ? 'status-ready' : 'status-error';

        const micBtn = document.getElementById('micBtn');
        if (isHttps && hasSpeech && hasMedia) {
            micBtn.disabled = false;
        } else {
            micBtn.disabled = true;
            this.showFallback();
        }
    }

    setupEventListeners() {
        const micBtn = document.getElementById('micBtn');
        const retryBtn = document.getElementById('retryBtn');
        const sendBtn = document.getElementById('sendBtn');
        const textInput = document.getElementById('textInput');
        const langSelect = document.getElementById('langSelect');

        micBtn.addEventListener('click', () => this.startVoiceInput());
        retryBtn.addEventListener('click', () => this.retryVoiceInput());
        sendBtn.addEventListener('click', () => this.processTextInput());
        textInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') this.processTextInput(); });

        langSelect.addEventListener('change', (e) => {
            this.currentLang = e.target.value;
            this.updateStatus(`‡§≠‡§æ‡§∑‡§æ: ${e.target.selectedOptions[0].text}`);
            if (this.recognition) {
                this.recognition.lang = this.currentLang;
            }
        });

        // Weather Button
        document.getElementById('weatherBtn').addEventListener('click', () => this.fetchWeather());

        // Mandi Button
        document.getElementById('mandiBtn').addEventListener('click', () => this.fetchMandiPrices());
    }

    async startVoiceInput() {
        // Previous mic permission code...
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            stream.getTracks().forEach(track => track.stop());
            this.permissionGranted = true;
            await this.initializeSpeechRecognition();
        } catch (error) {
            this.handleMicrophoneError(error);
        }
    }

    async initializeSpeechRecognition() {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.recognition = new SpeechRecognition();
        this.recognition.continuous = false;
        this.recognition.interimResults = true;
        this.recognition.lang = this.currentLang;

        this.recognition.onstart = () => {
            this.isListening = true;
            this.updateStatus("‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç... ‡§¨‡•ã‡§≤‡§ø‡§è");
            this.setMicState('listening');
        };

        this.recognition.onresult = (event) => {
            let finalTranscript = '';
            for (let i = event.resultIndex; i < event.results.length; i++) {
                if (event.results[i].isFinal) {
                    finalTranscript += event.results[i][0].transcript;
                }
            }
            if (finalTranscript.trim()) {
                this.finalTranscript = finalTranscript.trim();
                this.updateTranscript(this.finalTranscript);
                this.processQuery(this.finalTranscript);
            }
        };

        this.recognition.onerror = (event) => this.handleSpeechError(event.error);
        this.recognition.onend = () => { this.isListening = false; };

        this.recognition.start();
    }

    // Other handlers (handleMicrophoneError, handleSpeechError, setMicState, updateStatus, etc.) - previous code

    processQuery(query) {
        if (!query.trim()) return this.showError("‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§®‡§π‡•Ä‡§Ç‡•§");
        const lowerQuery = query.toLowerCase();
        let response = this.getAIResponse(lowerQuery);

        // Translate response to current lang if needed (simple map for demo; use API for full)
        if (this.currentLang === 'ml-IN' && response.solution.includes('‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ')) {
            response = { ...response, diagnosis: "‡¥®‡µà‡¥ü‡µç‡¥∞‡¥ú‡µª ‡¥ï‡µÅ‡¥±‡¥µ‡µç", solution: "‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø 25kg/‡¥è‡¥ï‡µç‡¥ï‡µº ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï." };
        }

        this.showResponse(response);
        this.speakResponse(response);
    }

    getAIResponse(query) {
        // Match crop problems
        for (const [key, data] of Object.entries(this.agriculturalData.cropProblems)) {
            if (query.includes(key.toLowerCase())) {
                return { type: 'crop', diagnosis: data.diagnosis, solution: data.solution, urgency: data.urgency };
            }
        }
        // Default
        return { type: 'general', diagnosis: "‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡§Æ‡§ù‡§æ", solution: "‡§´‡§∏‡§≤ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‚Äì ‡§ï‡•Ä‡§ü, ‡§∞‡•ã‡§ó, ‡§Ø‡§æ ‡§Æ‡•å‡§∏‡§Æ‡•§ ‡§ï‡•á‡§∞‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤/‡§Æ‡§ø‡§∞‡•ç‡§ö ‡§∏‡§≤‡§æ‡§π ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡•§", urgency: "" };
    }

    speakResponse(response) {
        const text = `${response.diagnosis}‡•§ ${response.solution}`;
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = this.currentLang;
        utterance.rate = 0.9;
        utterance.volume = 0.8;
        utterance.onend = () => this.updateStatus("‡§Ö‡§ó‡§≤‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§Ç");
        this.synthesis.speak(utterance);
    }

    processTextInput() {
        const query = document.getElementById('textInput').value.trim();
        if (query) {
            document.getElementById('textInput').value = '';
            this.processQuery(query);
        }
    }

    // Weather from IMD API (City ID map - example for major cities)
    async fetchWeather() {
        const city = document.getElementById('cityInput').value || 'Delhi';
        const cityIds = { 'Delhi': '421', 'Mumbai': '430', 'Kochi': '388', 'Chennai': '392' }; // From IMD PDF
        const cityId = cityIds[city] || '421'; // Default Delhi
        try {
            const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(`https://mausam.imd.gov.in/api/current_wx_api.php?id=${cityId}`)}`;
            const res = await fetch(proxyUrl);
            const data = await res.json();
            const output = `‡§§‡§æ‡§™‡§Æ‡§æ‡§®: ${data.temp || 'N/A'}¬∞C, ‡§Æ‡•å‡§∏‡§Æ: ${data.weather || '‡§∏‡§æ‡§´'}, ‡§®‡§Æ‡•Ä: ${data.humidity || 'N/A'}%. ‡§¨‡§æ‡§∞‡§ø‡§∂: ${data.rainfall || '‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç'}. ‡§ï‡•á‡§∞‡§≤ ‡§Æ‡•á‡§Ç ‡§Æ‡•â‡§®‡§∏‡•Ç‡§® ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§`;
            document.getElementById('weatherOutput').innerHTML = `<div class="solution">${output}</div><a href="https://mausam.imd.gov.in/" target="_blank">IMD ‡§∏‡§æ‡§á‡§ü</a>`;
            this.speakResponse({ text: output });
        } catch (err) {
            this.showError('‡§Æ‡•å‡§∏‡§Æ ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§');
        }
    }

    // Mandi Prices from data.gov.in/Agmarknet
    async fetchMandiPrices() {
        const city = document.getElementById('mandiCity').value || 'Delhi';
        const commodity = document.getElementById('commoditySelect').value;
        try {
            // data.gov.in API endpoint for daily prices
            const apiUrl = 'https://api.data.gov.in/resource/579c9ef3-8919-40e8-8344-61a1e9ab8d5e?api-key=NOKEY&format=json&limit=10'; // Public, filter by commodity/city in prod
            const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(apiUrl)}`;
            const res = await fetch(proxyUrl);
            const data = await res.json();
            // Simple parse (filter for commodity/city)
            const item = data.records.find(r => r.commodity_name === commodity && r.market_name.includes(city)) || data.records[0];
            const price = item ? `‡§Æ‡•ã‡§°‡§≤ ‡§™‡•ç‡§∞‡§æ‡§á‡§∏: ‚Çπ${item.modal_price}/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤ (‡§Æ‡§ø‡§®: ${item.min_price}, ‡§Æ‡•à‡§ï‡•ç‡§∏: ${item.max_price})` : '‡§°‡•á‡§ü‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç';
            const output = `${commodity} ‡§ï‡•Ä ${city} ‡§Æ‡•á‡§Ç ‡§Ü‡§ú ‡§ï‡•Ä‡§Æ‡§§: ${price}. ‡§¨‡•á‡§ö‡§®‡•á ‡§ï‡§æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø ‚Äì ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§`;
            document.getElementById('mandiOutput').innerHTML = `<div class="solution">${output}</div><a href="https://agmarknet.gov.in/" target="_blank">Agmarknet</a>`;
            this.speakResponse({ text: output });
        } catch (err) {
            this.showError('‡§Æ‡§Ç‡§°‡•Ä ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç‡•§');
        }
    }

    populateSchemes() {
        const list = document.getElementById('schemesList');
        this.schemes.forEach(scheme => {
            const li = document.createElement('li');
            li.innerHTML = `<strong>${scheme.name}:</strong> ${scheme.desc} <a href="${scheme.link}" target="_blank">‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç ‚Üí</a>`;
            list.appendChild(li);
        });
    }

    // UI Helpers (showResponse, showError, updateTranscript, etc.) - previous code with lang support
    showResponse(response) {
        const content = document.getElementById('responseContent');
        let html = `<div class="diagnosis"><strong>üîç ‡§®‡§ø‡§¶‡§æ‡§®:</strong> ${response.diagnosis}</div>
                    <div class="solution"><strong>üí° ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®:</strong> ${response.solution}</div>`;
        if (response.urgency) html += `<div class="urgency"><strong>‚ö° ‡§ú‡§∞‡•Ç‡§∞‡•Ä:</strong> ${response.urgency}</div>`;
        content.innerHTML = html;
        document.getElementById('responseSection').classList.remove('hidden');
    }

    // Add other missing methods from original (retryVoiceInput, hideAllSections, etc.)
    retryVoiceInput() {
        this.finalTranscript = '';
        if (this.recognition) this.recognition.stop();
        if (this.synthesis) this.synthesis.cancel();
        setTimeout(() => this.startVoiceInput(), 500);
    }

    updateStatus(message) {
        document.getElementById('status').textContent = message;
    }

    setMicState(state) {
        document.getElementById('micBtn').className = `mic-btn ${state}`;
    }

    updateTranscript(text) {
        document.getElementById('transcript').textContent = text;
        document.getElementById('transcriptSection').classList.remove('hidden');
    }

    showError(message) {
        document.getElementById('errorMessage').textContent = message;
        document.getElementById('errorSection').classList.remove('hidden');
    }

    showFallback() {
        document.getElementById('fallbackSection').classList.remove('hidden');
    }

    hideAllSections() {
        ['transcriptSection', 'responseSection', 'errorSection'].forEach(id => {
            document.getElementById(id).classList.add('hidden');
        });
    }
}

// Init
document.addEventListener('DOMContentLoaded', () => new KisanVaani());
